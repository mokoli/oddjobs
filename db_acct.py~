## Emily Van Laarhoven
## db_acct.py
## Last modified: 5/4/17
## Contains functions which interact with db to insert account

import dbconn2
import MySQLdb
import os
from oddjobs_dsn import DSN

## global variables
DATABASE = 'oddjobs_db'
DEBUG = False

def create_account(cursor,form_info,skills_list):
    '''inserts a new account into the db and returns True when successful'''
    ## insert new account info into db with None uid
    ## NOTE: I've added a column to db to tell if an account is active; 1=yes 0=no
    q1 = "Insert into account (uid, nm, rating_avg, street, town, st, skills, active) values (%s,%s,%s,%s,%s,%s,%s,1);"
    ## the line below employs the two helper functions below to get proper inputs for query
    skills = ",".join(skills_list)
    cursor.execute(q1,getInputs(form_info,skills))
    ## update the uid using last auto_increment id
    new_uid = cursor.lastrowid
    q2 = "Update account set uid=%s where uid is null;"
    cursor.execute(q2,[new_uid])
    ## check if insertion was successful and return boolean
    q3 = "Select count(*) from account where uid=%s;"
    cursor.execute(q3,[new_uid])
    return int(cursor.fetchone()['count(*)']) ==1


def getInputs(form_info,skills):
    '''gets inputs for prepared sql query from form'''
    uid = None
    nm = form_info['nm']
    street = form_info['street']
    town = form_info['town']
    st = form_info['st']
    rating = 5 ## start off with 5 rating?    
    inputs = [uid,nm,rating,street,town,st,skills]
    return inputs

def average_ratings(cursor,uid):
    '''returns the average rating for this uid from the rating table'''
    # get employee ratings
    q1 = "select sum(employee_rating) from rating where employee_id=%s;" 
    cursor.execute(q1,[uid])
    employee_total = int(cursor.fetchone()['sum(employee_rating)'])
    print "employee_total"
    print employee_total
    # get employer ratings
    q2 = "select sum(employer_rating) from rating where employer_id=%s;" 
    cursor.execute(q2,[uid])
    employer_total = int(cursor.fetchone()['sum(employer_rating)'])
    print "employer_total"
    print employer_total
    # get employee # of reviews
    q3 = "select count(employee_rating) from rating where employee_id=%s;" 
    cursor.execute(q3,[uid])
    employee_count = int(cursor.fetchone()['count(employee_rating)'])
    print "employee_count"
    print employee_count
    # get employer # of reviews
    q4 = "select count(employer_rating) from rating where employer_id=%s;" 
    cursor.execute(q4,[uid])
    employer_count = int(cursor.fetchone()['count(employer_rating)'])
    print "employer_count"
    print employer_count
    #compute average rating
    avg_rating= ((employee_total+employer_total)/(employee_count+employer_count))
    print "avg_rating"
    print avg_rating
    return avg_rating


#def stringifySkills(skills_list):
#    '''takes skills in skills list and returns string to store in db'''
#    skill_string = ""
#    for i in range(0,len(skills_list)-1):
#        skill_string = skill_string + skills_list[i] + ","
#    skill_string = skill_string + skills_list[-1]
#    return skill_string
